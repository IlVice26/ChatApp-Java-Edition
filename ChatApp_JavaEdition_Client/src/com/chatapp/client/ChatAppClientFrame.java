/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.chatapp.client;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author vicen
 */
public class ChatAppClientFrame extends javax.swing.JFrame {
    
    private Socket mySock;
    private InputStreamReader stringaIn;
    private BufferedReader in;
    private OutputStreamWriter stringaOut;
    private BufferedWriter out;
    private PrintWriter send;
    
    boolean inChat = false; 
    
    /**
     * Creates new form ChatAppClientFrame
     */
    public ChatAppClientFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        panelArea = new javax.swing.JTextArea();
        inputText = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ChatApp - Java Edition (Client)");

        title.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText(" ChatApp - Java Edition (Client)");
        title.setAlignmentY(0.0F);
        title.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        panelArea.setEditable(false);
        panelArea.setColumns(20);
        panelArea.setRows(5);
        jScrollPane1.setViewportView(panelArea);

        sendButton.setText("Invia");
        sendButton.setMaximumSize(new java.awt.Dimension(57, 23));
        sendButton.setMinimumSize(new java.awt.Dimension(57, 23));
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(inputText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        if (!inChat) {
            String cmd = inputText.getText();
            
            if (cmd.contains("/connect")) {
                String[] cmd1 = cmd.split(" ");
                
                if (cmd1.length == 3) {
                    try {
                        this.mySock = new Socket(cmd1[1], 5000);
                        
                        // Input e Output del server
                        this.stringaIn = new InputStreamReader(mySock.getInputStream());
                        this.stringaOut = new OutputStreamWriter(mySock.getOutputStream());
                        this.in = new BufferedReader(this.stringaIn);
                        this.out = new BufferedWriter(this.stringaOut);
                        this.send = new PrintWriter(this.out, true);
                        
                        send.println(cmd1[2]);
                        
                        RunnablesClient t1 = new RunnablesClient(mySock, this);
                        Thread th1 = new Thread(t1);
                        th1.start();

                        this.inChat = true;
                    } catch (IOException ex) {
                        // Errore nella connessione
                        panelArea.append("\nErrore nella connessione!"
                            + "\nNessun server trovato a questo indirizzo\n");
                    }
                } else {
                    panelArea.append("\nComando incompleto o errato: "
                            + "\n/connect [host] [username]");
                }
                
            } else if (cmd.contains("/help")) {
                panelArea.append("\nComandi chat client:"
                    + "\nComando        |       Descrizione"
                    + "\n/connect [host] [username]      |       Connette il client al server" 
                    + "\n/quit          |       Uscita dal server"
                    + "\n");
            } else {
                panelArea.append("\nComando sconosciuto\n");
            }
        } else {
            String cmd = inputText.getText();
            
            if (cmd.contains("/disconnect")) {
                try {
                    send.print("/quit");
                    mySock.close();
                    this.inChat = false;
                    panelArea.append("\n");
                } catch (IOException ex) { 
                    this.inChat = false;
                }
            } else if (cmd.contains("/help")) {
                panelArea.append("\nComandi chat client:"
                    + "\nComando        |       Descrizione"
                    + "\n/disconnect    |       Disconnette il client dal server" 
                    + "\n/quit          |       Uscita dal client"
                    + "\n");
            } else if (cmd.contains("/quit")) {
                try {
                    send.print("/quit");
                    mySock.close();
                    this.inChat = false;
                    System.exit(0);
                } catch (IOException ex) { 
                    System.exit(0);
                }
            } else {
                send.println(cmd);
                panelArea.append("\n" + cmd);
            }
        }
        inputText.setText("");
    }//GEN-LAST:event_sendButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatAppClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatAppClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatAppClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatAppClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatAppClientFrame().setVisible(true);
                startClient();
            }
        });
    }
    
    public static void startClient(){
        panelArea.append("ChatApp - Java Edition (dev01) - Client"
                + "\nCopyright 2019 - Vicentini Elia & Simone Gandini"
                + "\n\nDigita /help per conoscere i comandi\n");
        
        Scanner cliKeyboard = new Scanner(System.in);
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTextField inputText;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTextArea panelArea;
    public static javax.swing.JButton sendButton;
    private static javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
